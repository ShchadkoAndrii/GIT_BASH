JSON 4. Створити зовнішній репозиторій з назвою JSON

1. На сайті github.com в розділі Repositories,в полі Repository name написати JSON і  натиснути "Create repository"
Клонувати репозиторій JSON на локальний комп'ютер.
git clone git@github.com:raksha007/JSON.git
Всередині локального JSON створити файл “new.json”.
cd JSON
touch new.json
Добавити файл під гіт.
git add new.json
Закоммітити файл.
git commit -m "add new file"
Відправити файл на зовнішній GitHub репозиторій.
git push
Відрегатувати зміст файла “new.json” - написати информацію про себе (ПІБ, вік, кількість домашніх тварин, майбутня бажана зарплатня). Все написати в форматі JSON.
cat > new.json

{
 "Name":"Andrii",
 "Age":"30",
 "Pets":"4",
 "Salary":"5000$"
}

^C
Відправити зміни на зовнішній репозиторій.
git commit -am "Edit file new.json"
git push
Створити файл preferences.json
touch preferences.json
В файл preferences.json додати информацію щодо своїх вподобань (Улюблений фільм, улюблений серіал, улюблена їжа, улюблена пора року, країна яку хотіли би відвідати) в форматі JSON.
vim preferences.json
Press the button "i"

{  "Favorite film":   "The Matrix",
   "Favorite serial": "Lord of the rings",
   "Favorite food":   "Sushi" ,
   "Favorite season": "Summer" ,
   "Favorite country": "OAE"
}
Esc
:wq
Створити файл skills.json додати информацію про скіли які будут вивчені на курсі в форматі JSON
touch skills.json

vim skills.json

Натиснути на клавішу "I" - INSERT MODE
{
"1.": "Базова теорія (Що таке тестування, багрепорти, документація, види, методи, напрямки тестування і т.д.) SDLC, STLC",
"2.": "Що таке кліент-серверна архітектура",
"3.": "HTTP Методи запитів на сервер",
"4.": "Коди відповідей HTTP серверу",
"5.": "Структури HTTP запитів та відповідей",
"6.": "Що таке JSON, XML. Їх структура",
"7.": "Тестування API через Postman (JS, автотести API)",
"8.": "Зняття та читання логів з зовнішнього сервера",
"9.": "Сніфінг http web трафіка через Charles и Fiddler",
"10.": "Dev Tools веб браузерів (Google Chrome, FireFox)",
"11.": "VPN. (Як працює, навіщо потрібен, як використовувати, варіанти інструментів)",
"12.": "Мобільне тестування",
"13.": "Особливість iOS, Android, гайдлайни",
"14.": "Збірка iOS додатків на XCode. (В кого немає Mac комп'ютера, просто подивляться)",
"15.": "Збірка Android додатків на Android Studio",
"16.": "ADB (керування андроїд девайсами)",
"17.": "Настройка проксі и vpn на iOS и Android",
"18.": "Перехоплення (сніффінг) мобильного трафіка через Charles и Fiddler на iOS и Android",
"19.": "Командна строка (terminal) Linux (копіювання, створення, перегляд, переміщення файлів на серверах без графічного інтерфейсу)",
"20.": "Основи bash скріптинг, автоматизація рутинних задач на сервері",
"21.": "Доступ до віддалених серверів",
"22.": "Основи SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)",
"23.": "База даних Postgres (встановлення, налаштування і використання)",
"24.": "Нереляційна база даних Redis (встановлення, налаштування і використання)",
"25.": "Навантажувальне тестування в Jmeter",
"26.": "Методологія разробки Scrum",
"27.": "Python. (Вивчення основ.Створення кліент серверного додатку)"
}


Esc
:wq
Відправити зразу 2 файли на зовнішній репозиторій.
git add skills.json preferences.json
git commit -m "add new files preferences.json skills.json"
git push
На веб интерфейсі створити файл bug_report.json.
Зробити Commit changes (зберегти) зміни на веб интерфейсі.
Зайти на сайт github.com

Відкрити репозиторій JSON
Нажатина кнопку Add file
Выбрати в меню Create new file
В полі name написать bug_report.json
В поліCommit new file написати Create bug_report.json
Натиснути на кнопку Commit new file
На веб интерфейсі модифікувати файл bug_report.json, добавити баг репорт в форматі JSON.
Зробити Commit changes (зберегти) зміни на веб интерфейсі. Натиснути іконку "Олівець"
{
  "navigator": {
  "vendorSub": "",
  "productSub": "20030107",
  "vendor": "Google Inc.",
  "appCodeName": "Mozilla",
  "appName": "Netscape",
  "appVersion": "5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36",
  "platform": "MacIntel",
  "product": "Gecko",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36",
  "language": "en-US"
}

В полі Commit changes написать Update bug_report.json
Натиснути на кнопку Commit changes
Синхронізувати зовнішній і локальний репозиторій JSON
git pull
XML 21. Створити зовнішній репозиторій з назвою XML.

1. На сайті github.com в розділі Repositories,в полі Repository name написати XML і  натиснути "Create repository"
Клонувати репозиторій XML на локальний комп'ютер.
git clone git@github.com:raksha007/XML.git
Всередині локального XML створити файл “new.xml”.
cd XML
touch new.xml
Додати файл під гит.
git add new.xml
или
git add .
Закоммітити файл.
git commit -m "add new file new.xml"
Відправити файл на зовнішній GitHub репозиторій.
git push
Відредактувати зміст файлу “new.xml” - написати информацію про себе (ПІБ, вік, кількість домашніх тварин, майбутня бажана заробітня плата). Все написати в форматі XML.
cat > new.xml

<name>Andrii</name>
<age>30</age>
<pets>4</pets>
<salary>5000$</salary>

^C
Відправити зміни на зовнішній репозиторій.
git add
git commit -m "modify new.xml"
git push
Створити файл preferences.xml
touch preferences.xml
В файл preferences.xml добавити информацію про свої вподобання (Улюблений фільм, улюблений серіал, улюблена їжа, улюблена пора року, країна яку хотіли би відвідати) в форматі XML.
 cat > preferences.xml
 

<Favorite_film> The Matrix</Favorite_film>
<Favorite_serial> Lord of the rings </Favorite_serial>
<Favorite_food> Sushi</Favorite_food>
<Favorite_season> Summer</Favorite_season>
<Favorite_country> OAE</Favorite_country>

^C
Створити файл sklls.xml додати информацію про скіли які будут вивчені на курсі в форматі XML
 touch skills.xml
 cat > skills.xml
 
 <skills>
   <item_1>Базова теорія (Що таке тестування, багрепорти, документація, види, методи, напрямки тестування і т.д.) SDLC, STLC> </item_1>
   <item_2>Що таке кліент-серверна архітектура</item_2>
   <item_3>HTTP Методи запитів на сервер</item_3>
   <item_4>Коди відповідей HTTP серверу</item_4>
   <item_5>Структури HTTP запитів і відповідей</item_5>
   <item_6>Що таке JSON, XML. Їх структура</item_6>
   <item_7>Тестування API через Postman (JS, автотести API)</item_7>
   <item_8>Зняття і читання логів з зовнішнього серверу</item_8>
   <item_9>Сніфінг http web трафіку через Charles та Fiddler</item_9>
   <item_10>Dev Tools веб браузерів (Google Chrome, FireFox)</item_10>
   <item_11>VPN. (Як працює, навіщо потрібен, як використовувати, варіанти інструментів)</item_11>
   <item_12>Мобільне тестування</item_12>
   <item_13>Особливість iOS, Android, гайдлайни</item_13>
   <item_14>Збірка iOS додатків на XCode. (В кого немає Mac комп'ютера, просто подивляться)</item_14>
   <item_15>Сборка Android додатків на Android Studio</item_15>
   <item_16>ADB (Керування андроїд девайсами)</item_16>
   <item_17>Налаштування проксі та vpn на iOS і Android</item_17>
   <item_18>Перехоплення (сніффінг) мобільного трафіка через Charles та Fiddler на iOS і Android</item_18>
   <item_19>Командна строка (terminal) Linux (копіювання, створення, перегляд, переміщення файлів на серверах без графічного інтерфейсу)</item_19>
   <item_20>Основы bash скриптинг, автоматизация рутинных задач на сервере</item_20>
   <item_21>Доступ к удалённым серверам</item_21>
   <item_22>Основи SQL Create, Delete, Drop, Insert Into, Select, From, Where, Join)</item_22>
   <item_23>База даних Postgres (встановлення, налаштування та використання)</item_23>
   <item_24>Нереляційна база даних Redis (встановлення, налаштування та використання)</item_24>
   <item_25>Навантажувальне тестування в Jmeter</item_25>
   <item_26>Методологія розробки Scrum</item_26>
   <item_27>Python. (Вивчення основ. Створення клієнт серверного додатку)</item_27>
 </skills>

^C
Зробити комміт в одну строку.
git add . && git commit -m "add 2 new XML files"
Відправити зразу 2 файли на зовнішній репозиторій.
git push
На веб интерфейсі створити файл bug_report.xml.
Зробити Commit changes (зберегти) зміни на веб интерфейсі.
-Зайти на сайт github.com
-Відкрити репозиторій XML
-Натиснути на кнопку Add file
-Выбрати в меню Create new file
-В полі name написати bug_report.xml
-В полі Commit new file написати Create bug_report.xml
-Натиснути на кнопку Commit new file
На веб интерфейсі модифікувати файл bug_report.xml, добавити баг репорт в форматі XML.
Зробити Commit changes (зберегти) зміни на веб интерфейсі.
 Натиснути іконку "Олівець"
 
<?xml version="1.0" encoding="UTF-8"?>

<bugs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="XML-Schema-Rules.xsd">
   
    <bug priority="low">
        <bugnr>1</bugnr>
        <project>Web Application 1</project>
        <reporter>Andreas</reporter>
        <description>Application does not start.</description>   
    </bug>
   
    <bug>
        <bugnr>2</bugnr>
        <project>Web Application 1</project>
        <reporter>Andreas</reporter>
        <description>Login does not work.</description>
    </bug>
   
    <bug priority="high">
        <bugnr>3</bugnr>
        <project>Web Application 1</project>
        <reporter>Michael</reporter>
        <description>Registration does not work</description>
    </bug>
   
</bugs>

 В полі Commit changes написать Update bug_report.xml
 Натиснути на кнопку Commit changes
Синхронізувати зовнішній і локальний репозиторій XML
    git pull
TXT

Створити зовнішній репозиторій з назвою TXT.
1. На сайті github.com в розділі Repositories,в полі Repository name написати TXT  і натиснути "Create repository"

Клонувати репозиторій TXT на локальний комп'ютер.
 git clone git@github.com:raksha007/TXT.git
Всередині локального TXT створити файл “new.txt”.
cd TXT
touch new.txt
Додати файл під гіт.
git add new.txt
Закоммітити файл.
git commit -m "add  new.txt"
Відправити файл на зовнішній GitHub репозиторій.
git push
Відредактувати зміст файлу “new.txt” - написати информацію про себе (ПІБ, вік, кількість домашніх тварин, майбутня бажана заробітня плата). Все написати в форматі TXT.
cat > new.txt


name:Andrii,
age:30,
Pets:4,
salary:5000$.

^C

8. Відправити зміни на зовнішній репозиторій.

```bash
git add . | git commit -m "update file new.txt"
git push
Створити файл preferences.txt
touch preferences.txt
У файл preferences.txt додати інформацію про свої вподобання (Улюблений фільм, улюблений серіал, улюблена їжа, улюблена пора року, країна яку хотіли би відвідати) в форматі TXT.
cat > preferences.txt


Favorite film: "The Matrix"
Favorite serial: "Lord of the rings"
Favorite food: "Sushi"
Favorite season: "Summer"
Favorite coutry: "OAE"

^C
Створити файл sklls.txt додати інформацію про скіли які будут вивчені на курсі в форматі TXT
touch skills.txt
cat > skills.txt


1. Базова теорія (Що таке тестування, багрепорти, документація, види, методи, напрямки тестування і т.д.) SDLC, STLC
2. Що таке кліент-серверна архітектура
3. HTTP Методи запитів на сервер
4. Коди відповідей HTTP серверу
5. Структури HTTP запитів та відповідей
6. Що таке JSON, XML. Їх структура
7. Тестування API через Postman (JS, автотести API)
8. Зняття та читання логів з зовнішнього сервера
9. Сніфінг http web трафіка через Charles и Fiddler
10. Dev Tools веб браузерів (Google Chrome, FireFox)
11. VPN. (Як працює, навіщо потрібен, як використовувати, варіанти інструментів)
12. Мобільне тестування
13. Особливість iOS, Android, гайдлайни
14. Збірка iOS додатків на XCode. (В кого немає Mac комп'ютера, просто подивляться)
15. Збірка Android додатків на Android Studio
16. ADB (керування андроїд девайсами)
17. Настройка проксі и vpn на iOS і Android
18. Перехоплення (сніффінг) мобільного трафіка через Charles и Fiddler на iOS и Android
19. Командна строка (terminal) Linux (копіювання, створення, перегляд, переміщення файлів на серверах без графічного інтерфейсу)
20. Основи bash скріптинг, автоматизація рутинних задач на сервері
21. Доступ до віддалених серверів
22. Основи SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)
23. База даних Postgres (встановлення, налаштування і використання)
24. Нереляційна база даних Redis (встановлення, налаштування і використання)
25. Навантажувальне тестування в Jmeter
26. Методологія разробки Scrum
27. Python. (Вивчення основ.Створення кліент серверного додатку)

^C
Зробити комміт в одну строку.
 git add . && git commit -am "add 2 files .txt"
Відправити одразу 2 файли на зовнішній репозиторій.
 git push
На веб интерфейсі створити файл bug_report.txt.
Зробити Commit changes (зберегти) зміни на веб интерфейсі.
-Зайти на сайт github.com
-Відкрити репозиторій TXT
-Натиснути на кнопку Add file
-Выбрати в меню Create new file
-В полі name написати bug_report.txt
-В полі Commit new file написаті Create bug_report.txt
-Натиснути на кнопку Commit new file
На веб интерфейсі модифікуватиь файл bug_report.txt, додати баг репорт в форматі TXT.
Зробити Commit changes (зберегти) зміни на веб интерфейсі. Натиснути иконку "Карандаш"
  
Bug-reports	
ID	BR000001
Summary	Не змінюється мова в tooltip в пощуковій строці після зміни мови на сайті
Pre-conditions	Відкрити сайт https://ldubgd.edu.ua/
Steps to Reproduce:	
	
	1.Натиснути на прапор Великої Британії в правому кутку(зміна мови)
	2.Навести курсор на пошукову строку
	
	
	
Expected result	Сторінка перевелась на англ мову
Actual result	Сторінка не перевелась на англ мову
Post-condition	Закрити сторінку
Environment	"Chrome 104.0.5112.81 (Офіційна збірка), (64 біт)
"
Severity	Trivial
Priority	Low
Submit Date	11.08.2021
Reporter	Andrii Shchadko
Attachment	


В полі Commit changes написати Update bug_report.xml
Нажатиснути на кнопку Commit changes
Синхронізувати зовнішній та локальний репозиторій TXT
